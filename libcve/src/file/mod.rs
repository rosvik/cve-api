use serde_json::from_reader;
use std::fs::File;
use std::io::{BufReader, Result};

use crate::format::CVE;

const PATH: &str = "../cvelistV5/cves/";

pub fn get_file(id: String) -> Result<CVE> {
    let (year, id_part) = get_file_path(&id);

    let file_path = format!("{}{}/{}/{}.json", PATH, year, id_part, id);

    let file = match File::open(file_path) {
        Ok(file) => file,
        Err(e) => return Err(e.into()),
    };

    let reader = BufReader::new(file);
    let result = from_reader(reader);
    let cve: CVE = match result {
        Ok(cve) => cve,
        Err(e) => return Err(e.into()),
    };

    if cve.cveMetadata.state != "PUBLISHED" {
        return Err(std::io::Error::new(
            std::io::ErrorKind::Other,
            "CVE is not published",
        ));
    }

    Ok(cve)
}

fn get_file_path(id: &String) -> (String, String) {
    let year = &id[4..8];
    let num = &id[9..];

    // Replace the 3 last digits with xxx
    let id_slug = format!("{}xxx", &num[..num.len() - 3]);
    (year.to_string(), id_slug)
}
