use serde_json::from_str;
use std::fs::{read_dir, File};
use std::io::{Error, ErrorKind, Read, Result};

use crate::format::CVE;
use crate::utils::{file_path_by_id, most_recent_group, most_recent_year};

pub fn cves_by_id(ids: Vec<String>) -> Result<Vec<CVE>> {
    let mut cves: Vec<CVE> = Vec::new();
    for id in ids {
        let cve = match cve_by_id(id) {
            Ok(cve) => cve,
            Err(e) => return Err(e),
        };
        cves.push(cve);
    }
    Ok(cves)
}

pub fn cve_by_id(id: String) -> Result<CVE> {
    let path = file_path_by_id(id);
    let cve = match cve_by_path(path) {
        Ok(cve) => cve,
        Err(e) => return Err(e),
    };
    Ok(cve)
}

fn cve_by_path(path: String) -> Result<CVE> {
    let mut s = String::new();
    let mut file = match File::open(path) {
        Ok(file) => file,
        Err(e) => {
            return Err(Error::new(
                ErrorKind::NotFound,
                format!("Could not read file ({})", e),
            ))
        }
    };

    file.read_to_string(&mut s)?;

    let cve: CVE = match from_str(&s) {
        Ok(cve) => cve,
        Err(e) => {
            return Err(Error::new(
                ErrorKind::InvalidData,
                format!("CVE data is invalid ({})", e),
            ))
        }
    };

    return Ok(cve);
}

pub fn most_recent_cve_ids(count: u32) -> Result<Vec<String>> {
    let year = most_recent_year()?;
    let group = most_recent_group(&year)?;
    let base_dir = read_dir(format!("{}{}/{}/", crate::BASE_PATH, year, group))?;

    let mut numbers: Vec<u32> = base_dir
        .filter(|f| f.as_ref().unwrap().file_type().unwrap().is_file())
        .into_iter()
        .map(|p| {
            let r = p.unwrap().file_name();
            let name = r.to_str().unwrap();
            name[9..name.len() - 5].parse::<u32>().unwrap()
        })
        .collect();
    numbers.sort();

    let slice: i32 = numbers.len() as i32 - count as i32;
    if slice > 0 {
        numbers = numbers[slice as usize..].to_vec();
    }

    let ids = &numbers
        .iter_mut()
        .map(|x| format!("CVE-{}-{:05}", year, x.to_string()))
        .collect::<Vec<String>>();
    return Ok(ids.to_vec());
}
