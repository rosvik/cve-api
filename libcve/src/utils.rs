use std::{fs::read_dir, io::Result};

use crate::BASE_PATH;

/**
* Get path to the json file, based on BASE_PATH and the CVE id .
* `CVE-YYYY-NNNNN`
*/
pub fn file_path_by_id(id: String) -> String {
    let year = &id[4..8]; // YYYY
    let num = &id[9..]; // NNNNN
    let group = format!("{}xxx", &num[..num.len() - 3]);

    format!(
        "{base_path}{year}/{group}/{id}.json",
        base_path = BASE_PATH,
        year = year,
        group = group,
        id = id
    )
}

pub fn most_recent_year() -> Result<String> {
    let base_dir = read_dir(crate::BASE_PATH)?;
    let dirs = base_dir
        .filter(|f| f.as_ref().unwrap().file_type().unwrap().is_dir())
        .into_iter();
    let year = dirs
        .map(|p| p.unwrap().file_name().to_str().unwrap().to_string())
        .max()
        .unwrap();
    return Ok(year);
}

pub fn most_recent_group(year: &String) -> Result<String> {
    let base_dir = read_dir(format!("{}/{}", crate::BASE_PATH, year))?;
    let dir_num: u32 = base_dir
        .filter(|f| f.as_ref().unwrap().file_type().unwrap().is_dir())
        .into_iter()
        .map(|p| {
            let r = p.unwrap().file_name();
            let name = r.to_str().unwrap();
            let i = name[..name.len() - 3].parse::<u32>().unwrap();
            i
        })
        .max()
        .unwrap();
    return Ok(format!("{}xxx", dir_num));
}
