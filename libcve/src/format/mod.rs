use serde::{Deserialize, Serialize};

#[derive(Serialize, Deserialize)]
#[allow(non_snake_case)]
pub struct CVE {
    pub dataType: String,
    pub dataVersion: String,
    pub cveMetadata: CveMetadata,
    pub containers: Container,
}

#[derive(Serialize, Deserialize)]
#[allow(non_snake_case)]
pub struct CveMetadata {
    pub cveId: String,
    pub assignerOrgId: String,
    pub state: String,
    pub assignerShortName: Option<String>,
    pub dateReserved: Option<String>,
    pub datePublished: Option<String>,
    pub dateUpdated: Option<String>,
}

#[derive(Serialize, Deserialize)]
#[allow(non_snake_case)]
pub struct Container {
    pub cna: Cna,
    pub adp: Option<Vec<Adp>>,
}

#[derive(Serialize, Deserialize)]
#[allow(non_snake_case)]
pub struct Cna {
    pub providerMetadata: ProviderMetadata,
    pub datePublic: Option<String>,
    pub title: Option<String>,
    pub descriptions: Vec<Description>,
    pub affected: Vec<Affected>,
    pub problemTypes: Option<Vec<ProblemTypeContainer>>,
    pub references: Vec<Reference>,
    pub impacts: Option<Vec<Impacts>>,
    pub metrics: Option<Vec<Metric>>,
    pub configurations: Option<Vec<Description>>,
    pub workarounds: Option<Vec<Description>>,
    pub solutions: Option<Vec<Description>>,
    pub exploits: Option<Vec<Description>>,
    pub timeline: Option<Vec<Timeline>>,
    pub credits: Option<Vec<Credit>>,
    // pub source: Option<Source>,
    pub tags: Option<Vec<String>>,
    pub taxonomyMappings: Option<Vec<TaxonomyMapping>>,
}

#[derive(Serialize, Deserialize)]
#[allow(non_snake_case)]
pub struct Adp {
    pub providerMetadata: ProviderMetadata,
    pub datePublic: Option<String>,
    pub title: Option<String>,
    pub descriptions: Option<Vec<Description>>,
    pub affected: Option<Vec<Affected>>,
    pub problemTypes: Option<Vec<ProblemTypeContainer>>,
    pub references: Option<Vec<Reference>>,
    pub impacts: Option<Vec<Impacts>>,
    pub metrics: Option<Vec<Metric>>,
    pub configurations: Option<Vec<Description>>,
    pub workarounds: Option<Vec<Description>>,
    pub solutions: Option<Vec<Description>>,
    pub exploits: Option<Vec<Description>>,
    pub timeline: Option<Vec<Timeline>>,
    pub credits: Option<Vec<Credit>>,
    // pub source: Option<Source>,
    pub tags: Option<Vec<String>>,
    pub taxonomyMappings: Option<Vec<TaxonomyMapping>>,
}

#[derive(Serialize, Deserialize)]
#[allow(non_snake_case)]
pub struct ProviderMetadata {
    pub orgId: String,
    pub shortName: Option<String>,
    pub dateUpdated: Option<String>,
}

#[derive(Serialize, Deserialize)]
#[allow(non_snake_case)]
pub struct Description {
    pub lang: String,
    pub value: String,
    pub supportingMedia: Option<Vec<SupportingMedia>>,
}

#[derive(Serialize, Deserialize)]
#[allow(non_snake_case)]
pub struct SupportingMedia {
    pub r#type: String,
    pub base64: bool,
    pub value: String,
}

#[derive(Serialize, Deserialize)]
#[allow(non_snake_case)]
pub struct Affected {
    pub vendor: Option<String>,
    pub product: Option<String>,
    pub collectionURL: Option<String>,
    pub packageName: Option<String>,
    pub cpes: Option<Vec<String>>,
    pub modules: Option<Vec<String>>,
    pub programFiles: Option<Vec<String>>,
    pub programRoutines: Option<Vec<String>>,
    pub platforms: Option<Vec<String>>,
    pub repo: Option<String>,
    pub defaultStatus: Option<String>,
    pub versions: Option<Vec<Version>>,
}

#[derive(Serialize, Deserialize)]
#[allow(non_snake_case)]
pub struct Version {
    pub version: String,
    pub status: String,
    pub versionType: Option<String>,
    pub lessThan: Option<String>,
    pub lessThanOrEqual: Option<String>,
    pub changes: Option<Vec<Changes>>,
}

#[derive(Serialize, Deserialize)]
#[allow(non_snake_case)]
pub struct Changes {
    pub at: String,
    pub status: String,
}

#[derive(Serialize, Deserialize)]
#[allow(non_snake_case)]
pub struct ProblemTypeContainer {
    pub descriptions: Vec<ProblemType>,
}

#[derive(Serialize, Deserialize)]
#[allow(non_snake_case)]
pub struct ProblemType {
    pub lang: String,
    pub description: String,
    pub cweId: Option<String>,
    pub r#type: Option<String>,
    pub references: Option<Vec<Reference>>,
}

#[derive(Serialize, Deserialize)]
#[allow(non_snake_case)]
pub struct Reference {
    pub url: String,
    pub name: Option<String>,
    pub tags: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize)]
#[allow(non_snake_case)]
pub struct Impacts {
    pub capecId: Option<String>,
    pub description: Vec<Description>,
}

#[derive(Serialize, Deserialize)]
#[allow(non_snake_case)]
pub struct Metric {
    pub format: Option<String>,
    pub scenarios: Option<Vec<Scenario>>,
    // pub cvssV3_1: Option<CvssV3_1>,
    // pub cvssV3_0: Option<CvssV3_0>,
    // pub cvssV2_0: Option<CvssV2_0>,
    // pub other: Option<Other>,
}

#[derive(Serialize, Deserialize)]
#[allow(non_snake_case)]
pub struct Scenario {
    pub lang: String,
    pub value: String,
}

#[derive(Serialize, Deserialize)]
#[allow(non_snake_case)]
pub struct Timeline {
    pub time: String,
    pub lang: String,
    pub value: String,
}

#[derive(Serialize, Deserialize)]
#[allow(non_snake_case)]
pub struct Credit {
    pub lang: String,
    pub value: String,
    pub user: Option<String>,
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize)]
#[allow(non_snake_case)]
pub struct TaxonomyMapping {
    pub taxonomyName: String,
    pub taxonomyVersion: Option<String>,
    pub taxonomyRelations: Vec<TaxonomyRelations>,
}

#[derive(Serialize, Deserialize)]
#[allow(non_snake_case)]
pub struct TaxonomyRelations {
    pub taxonomyId: String,
    pub relationshipName: String,
    pub relationshipValue: String,
}
