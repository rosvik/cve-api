use super::ProviderMetadata;
use serde::{Deserialize, Serialize};
use serde_with::skip_serializing_none;

#[derive(Serialize, Deserialize)]
#[allow(non_snake_case)]
pub struct Rejected {
    pub dataType: String,
    pub dataVersion: String,
    pub cveMetadata: RejectedMetadata,
    pub containers: RejectedContainer,
}

#[skip_serializing_none]
#[derive(Serialize, Deserialize)]
#[allow(non_snake_case)]
pub struct RejectedMetadata {
    pub cveId: String,
    pub assignerOrgId: String,
    pub state: String,
    pub assignerShortName: Option<String>,
    pub dateReserved: Option<String>,
    pub datePublished: Option<String>,
    pub dateUpdated: Option<String>,
}

#[skip_serializing_none]
#[derive(Serialize, Deserialize)]

pub struct RejectedContainer {
    pub cna: RejectedCna,
}

#[skip_serializing_none]
#[derive(Serialize, Deserialize)]
#[allow(non_snake_case)]
pub struct RejectedCna {
    pub providerMetadata: ProviderMetadata,
}
