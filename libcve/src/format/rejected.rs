use serde::{Deserialize, Serialize};
use serde_with::skip_serializing_none;

use super::shared::{CveMetadata, Description, ProviderMetadata};

#[derive(Serialize, Deserialize, Clone, Debug)]
#[allow(non_snake_case)]
pub struct Rejected {
  pub dataType: String,
  pub dataVersion: String,
  pub cveMetadata: CveMetadata,
  pub containers: Container,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct Container {
  pub cna: Cna,
}

#[skip_serializing_none]
#[derive(Serialize, Deserialize, Clone, Debug)]
#[allow(non_snake_case)]
pub struct Cna {
  pub providerMetadata: ProviderMetadata,
  pub rejectedReasons: Vec<Description>,
  pub replacedBy: Option<Vec<String>>,
}
