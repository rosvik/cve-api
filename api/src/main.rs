use axum::{extract::Query, routing::get, Router};
use serde::Deserialize;
use std::net::SocketAddr;

use libcve::{file::get_file, format::CVE};

#[tokio::main]
async fn main() {
    let app = Router::new().route("/cve", get(handler));

    let addr = SocketAddr::from(([127, 0, 0, 1], 3000));
    println!("listening on http://{}", addr);
    axum::Server::bind(&addr)
        .serve(app.into_make_service())
        .await
        .unwrap();
}

#[derive(Deserialize)]
struct SingleCveParameters {
    id: String,
}

async fn handler(Query(query): Query<SingleCveParameters>) -> String {
    let file = get_file(query.id);

    let cve = match file {
        Ok(cve) => cve,
        Err(e) => return format!("Could not get CVE: {}", e),
    };

    let jsonstring = serde_json::to_string(&cve).unwrap();
    format!("{}\n", jsonstring)
}
