use axum::{extract::Query, routing::get, Router};
use rand::{thread_rng, Rng};
use serde::Deserialize;
use std::net::SocketAddr;

use libcve::file::get_file;

#[tokio::main]
async fn main() {
    let app = Router::new().route("/", get(handler));
    let app = app.nest_service("/clean", get(random_handler));

    let addr = SocketAddr::from(([127, 0, 0, 1], 3000));
    println!("listening on http://{}", addr);
    axum::Server::bind(&addr)
        .serve(app.into_make_service())
        .await
        .unwrap();
}

#[derive(Deserialize)]
struct RangeParameters {
    start: usize,
    end: usize,
}

async fn handler() -> String {
    // Generate a random number in range parsed from query.
    let st = get_file();

    // Send response in html format.
    format!("{}\n", st.unwrap())
}

async fn random_handler(Query(range): Query<RangeParameters>) -> String {
    // Generate a random number in range parsed from query.
    let random_number = thread_rng().gen_range(range.start..range.end);

    format!("{}", random_number)
}
