use axum::{extract::Query, http::StatusCode, routing::get, Json, Router};
use serde::Deserialize;
use std::net::SocketAddr;

use libcve::{
    file::{cve_by_id, cves_by_id},
    format::CVE,
};

#[tokio::main]
async fn main() {
    let app = Router::new()
        .route("/", get(root))
        .route("/cve", get(single_cve_handler))
        .route("/cves", get(mutliple_cves_handler));

    let addr = SocketAddr::from(([127, 0, 0, 1], 3000));
    println!("listening on http://{}", addr);
    axum::Server::bind(&addr)
        .serve(app.into_make_service())
        .await
        .unwrap();
}

async fn root() -> &'static str {
    "Hello world!\n"
}

#[derive(Deserialize)]
struct MultipleCvesParameters {
    ids: String,
}
async fn mutliple_cves_handler(
    Query(query): Query<MultipleCvesParameters>,
) -> Result<Json<Vec<CVE>>, StatusCode> {
    let ids = query.ids.split(",").map(|s| s.to_string()).collect();
    let result = cves_by_id(ids);
    let cves = match result {
        Ok(cves) => cves,
        Err(e) => return Err(error_code(e)),
    };
    Ok(Json(cves))
}

#[derive(Deserialize)]
struct SingleCveParameters {
    id: String,
}
async fn single_cve_handler(
    Query(query): Query<SingleCveParameters>,
) -> Result<Json<CVE>, StatusCode> {
    let file = cve_by_id(query.id);

    let cve = match file {
        Ok(cve) => cve,
        Err(e) => return Err(error_code(e)),
    };

    Ok(Json(cve))
}

fn error_code(e: std::io::Error) -> StatusCode {
    println!("Error: {}", e);
    if e.kind() == std::io::ErrorKind::NotFound {
        return StatusCode::NOT_FOUND;
    }
    if e.kind() == std::io::ErrorKind::InvalidData {
        return StatusCode::INTERNAL_SERVER_ERROR;
    }
    StatusCode::IM_A_TEAPOT
}
