use anyhow::{Ok, Result};
use postgres::{Client, NoTls};

pub fn init() -> Result<()> {
  let mut client = Client::connect("postgresql://myuser:hunter2@localhost/cve", NoTls)?;

  let table_name = "person";

  // Check if the table exists
  let table_exists_query = format!(
    "SELECT EXISTS (
      SELECT FROM information_schema.tables
      WHERE table_name = '{}'
    )",
    table_name
  );
  let table_exists: bool = client.query_one(table_exists_query.as_str(), &[])?.get(0);
  if table_exists {
    return Err(anyhow::anyhow!("Table already exists"));
  }

  client.batch_execute(
    "
      CREATE TABLE person (
          id      SERIAL PRIMARY KEY,
          name    TEXT NOT NULL,
          data    BYTEA
      )
  ",
  )?;

  let name = "Ferris";
  let data = None::<&[u8]>;
  client.execute(
    "INSERT INTO person (name, data) VALUES ($1, $2)",
    &[&name, &data],
  )?;

  for row in client.query("SELECT id, name, data FROM person", &[])? {
    let id: i32 = row.get(0);
    let name: &str = row.get(1);
    let data: Option<&[u8]> = row.get(2);

    println!("found person: {} {} {:?}", id, name, data);
  }
  Ok(())
}

#[cfg(test)]
mod tests {
  // use super::*;

  use crate::init;

  #[test]
  fn it_works() {
    init().unwrap();
  }
}
